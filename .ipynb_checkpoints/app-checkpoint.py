{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afc59a1e-3965-4227-91e7-58195c862a86",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import streamlit as st\n",
    "\n",
    "# ---------- Access gate ----------\n",
    "ACCESS_KEY = os.getenv(\"ACCESS_KEY\", \"\")\n",
    "qk = st.query_params.get(\"k\")\n",
    "if ACCESS_KEY:\n",
    "    if \"ok\" not in st.session_state:\n",
    "        st.session_state.ok = (qk == ACCESS_KEY)\n",
    "    if st.session_state.ok is False:\n",
    "        st.write(\"Unauthorized. Append ?k=YOUR_KEY once to the URL.\")\n",
    "        st.stop()\n",
    "\n",
    "# ---------- Page config ----------\n",
    "st.set_page_config(page_title=\"Feedback Dashboard\", layout=\"wide\")\n",
    "st.markdown(\"<style>div.block-container{padding-top:1rem;padding-bottom:1rem;max-width:1200px}</style>\", unsafe_allow_html=True)\n",
    "\n",
    "# ---------- Sample data (replace with live sources) ----------\n",
    "team_performance = pd.DataFrame({\n",
    "    \"name\": [\"Productivity\",\"Knowledge\",\"Collaboration\",\"Innovation\",\"Professionalism\",\"Discipline\",\"Learning\"],\n",
    "    \"score\": [8.7,7.9,7.3,7.3,8.3,7.6,8.0]\n",
    "})\n",
    "\n",
    "ind = pd.DataFrame({\n",
    "    \"name\": [\"Productivity\",\"Knowledge\",\"Collaboration\",\"Innovation\",\"Professionalism\",\"Discipline\",\"Learning\"],\n",
    "    \"Alice\": [8.5,7.9,7.2,7.8,8.6,7.9,8.3],\n",
    "    \"Bob\":   [8.0,7.5,8.5,6.9,8.1,7.4,7.8],\n",
    "    \"Carol\": [7.8,8.1,6.8,7.2,8.3,7.5,8.1],\n",
    "})\n",
    "\n",
    "trend = pd.DataFrame({\n",
    "    \"month\": [\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\"],\n",
    "    \"Alice\": [7.1,8.9,8.0,8.7,9.5],\n",
    "    \"Bob\":   [8.1,7.9,7.3,6.7,6.6],\n",
    "    \"Carol\": [7.8,8.1,8.9,9.2,9.6],\n",
    "})\n",
    "\n",
    "bonus = pd.DataFrame({\"name\":[\"Alice\",\"Bob\",\"Carol\"], \"value\":[35,25,40]})\n",
    "\n",
    "heatmap = pd.DataFrame([\n",
    "    {\"member\":\"Alice\",\"Productivity\":9,\"Knowledge\":8,\"Collaboration\":7,\"Innovation\":8,\"Discipline\":9},\n",
    "    {\"member\":\"Bob\",\"Productivity\":8,\"Knowledge\":7,\"Collaboration\":9,\"Innovation\":6,\"Discipline\":8},\n",
    "    {\"member\":\"Carol\",\"Productivity\":8,\"Knowledge\":8,\"Collaboration\":6,\"Innovation\":7,\"Discipline\":7},\n",
    "])\n",
    "\n",
    "# ---------- Header ----------\n",
    "st.title(\"Team Dashboard\")\n",
    "\n",
    "# ---------- Group 1: Overview (left: performance; right: bonus) ----------\n",
    "left, right = st.columns([2.1, 1.0])\n",
    "\n",
    "with left:\n",
    "    st.subheader(\"Team Performance\")\n",
    "    view = st.segmented_control(\"View\", options=[\"Team\",\"Individual\",\"Compare\"], default=\"Team\", key=\"perf_view\")\n",
    "    h = 260\n",
    "\n",
    "    if view == \"Team\":\n",
    "        fig = px.bar(team_performance, x=\"name\", y=\"score\", range_y=[0,10], labels={\"name\":\"\",\"score\":\"\"})\n",
    "        fig.update_traces(marker_line_width=0, hovertemplate=\"%{x}: %{y}\")\n",
    "        fig.update_layout(height=h, margin=dict(l=10,r=10,t=10,b=10))\n",
    "        st.plotly_chart(fig, use_container_width=True)\n",
    "\n",
    "    elif view == \"Individual\":\n",
    "        long = ind.melt(id_vars=\"name\", var_name=\"member\", value_name=\"score\")\n",
    "        fig = px.bar(long, x=\"name\", y=\"score\", color=\"member\", barmode=\"group\", range_y=[0,10], labels={\"name\":\"\",\"score\":\"\"})\n",
    "        fig.update_layout(height=h, margin=dict(l=10,r=10,t=10,b=10), legend_title_text=\"\")\n",
    "        st.plotly_chart(fig, use_container_width=True)\n",
    "\n",
    "    else:\n",
    "        avg = ind.set_index(\"name\").mean(axis=1).round(1)\n",
    "        long = ind.melt(id_vars=\"name\", var_name=\"member\", value_name=\"score\")\n",
    "        fig = px.bar(long, x=\"name\", y=\"score\", color=\"member\", barmode=\"group\", range_y=[0,10], labels={\"name\":\"\",\"score\":\"\"})\n",
    "        fig.add_scatter(x=avg.index, y=avg.values, mode=\"lines\", name=\"TeamAvg\", line=dict(width=3))\n",
    "        fig.update_layout(height=h, margin=dict(l=10,r=10,t=10,b=10), legend_title_text=\"\")\n",
    "        st.plotly_chart(fig, use_container_width=True)\n",
    "\n",
    "with right:\n",
    "    st.subheader(\"Bonus Allocation\")\n",
    "    pie = px.pie(bonus, names=\"name\", values=\"value\", hole=0.25)\n",
    "    pie.update_traces(textinfo=\"percent+label\", hovertemplate=\"%{label}: %{value}%\")\n",
    "    pie.update_layout(height=260, margin=dict(l=10,r=10,t=10,b=10), legend_title_text=\"\")\n",
    "    st.plotly_chart(pie, use_container_width=True)\n",
    "\n",
    "# ---------- Group 2: Insights (left: trends; right: heatmap) ----------\n",
    "left2, right2 = st.columns(2)\n",
    "\n",
    "with left2:\n",
    "    st.subheader(\"Performance Trends\")\n",
    "    long_t = trend.melt(id_vars=\"month\", var_name=\"member\", value_name=\"score\")\n",
    "    line = px.line(long_t, x=\"month\", y=\"score\", color=\"member\", range_y=[0,10], markers=True)\n",
    "    line.update_layout(height=240, margin=dict(l=10,r=10,t=10,b=10), legend_title_text=\"\")\n",
    "    st.plotly_chart(line, use_container_width=True)\n",
    "\n",
    "with right2:\n",
    "    st.subheader(\"Team Heatmap\")\n",
    "    cats = [c for c in heatmap.columns if c != \"member\"]\n",
    "    hm_vals = heatmap[cats].to_numpy()\n",
    "    z = (hm_vals - hm_vals.min()) / max(hm_vals.max() - hm_vals.min(), 1e-9)\n",
    "    # simple color scale by normalized value\n",
    "    hm_long = heatmap.melt(id_vars=\"member\", var_name=\"category\", value_name=\"score\")\n",
    "    heat = px.density_heatmap(hm_long, x=\"category\", y=\"member\", z=\"score\", color_continuous_scale=\"RdYlGn\", nbinsx=len(cats))\n",
    "    heat.update_layout(height=240, margin=dict(l=10,r=10,t=10,b=10), coloraxis_colorbar=dict(title=\"\"))\n",
    "    st.plotly_chart(heat, use_container_width=True)\n",
    "\n",
    "# ---------- Group 3: People ----------\n",
    "st.subheader(\"Member Feedback\")\n",
    "tabs = st.tabs([\"Alice\", \"Bob\", \"Carol\"])\n",
    "for tab, who, pct, strengths, improve in [\n",
    "    (tabs[0], \"Alice\", 90, \"Delivers on time with high code quality.\", \"Increase knowledge sharing.\"),\n",
    "    (tabs[1], \"Bob\",   82, \"Excellent collaboration and problem solving.\", \"Improve documentation quality.\"),\n",
    "    (tabs[2], \"Carol\", 84, \"Innovative model optimizations.\", \"More consistent reporting.\"),\n",
    "]:\n",
    "    with tab:\n",
    "        st.markdown(f\"**Strengths:** {strengths}\")\n",
    "        st.markdown(f\"**Improvement:** {improve}\")\n",
    "        st.progress(pct/100)\n",
    "\n",
    "# ---------- Footer ----------\n",
    "st.caption(\"Compact layout optimized for small canvas. Replace sample data with live sources or a DB query.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
